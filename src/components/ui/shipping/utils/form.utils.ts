// üîß Form Helper Utils - ‡∏¢‡∏π‡∏ó‡∏¥‡∏•‡∏¥‡∏ï‡∏µ‡πâ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°
import type { ShippingType } from '../types';

// üìù Generate unique parcel number
export const generateParcelNumber = (type: ShippingType): string => {
  const timestamp = Date.now();
  const random = Math.floor(Math.random() * 1000).toString().padStart(3, '0');
  
  const prefixes = {
    Thai: 'TH',
    ThaiLaos: 'TL',
    Laos: 'LA',
    LaosThai: 'LT'
  };
  
  return `${prefixes[type]}${timestamp}${random}`;
};

// üìä Format form data for display
export const formatFormDataForDisplay = (
  formData: Record<string, unknown>
): Record<string, string> => {
  const formatted: Record<string, string> = {};
  
  Object.entries(formData).forEach(([key, value]) => {
    if (value && typeof value === 'string') {
      // ‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ü‡∏¥‡∏•‡∏î‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
      const fieldName = translateFieldName(key);
      formatted[fieldName] = value;
    }
  });
  
  return formatted;
};

// üåê Translate field names to Thai
export const translateFieldName = (fieldName: string): string => {
  const translations: Record<string, string> = {
    // Thai form fields
    senderNameThai: '‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á',
    senderPhoneThai: '‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á',
    senderAddressThai: '‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á',
    senderAddressAreaThai: '‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á',
    receiverNameThai: '‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö',
    receiverPhoneThai: '‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö',
    receiverAddressThai: '‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö',
    receiverAddressAreaThai: '‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö',
    weightThai: '‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å (‡∏Å‡∏Å.)',
    widthThai: '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á (‡∏ã‡∏°.)',
    lengthThai: '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß (‡∏ã‡∏°.)',
    heightThai: '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á (‡∏ã‡∏°.)',
    productTypeThai: '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤',
    calculatedPrice: '‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÑ‡∏î‡πâ',
    
    // Thai-Laos form fields
    senderNameThaiLaos: '‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á',
    senderPhoneThaiLaos: '‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á',
    senderAddressThaiLaos: '‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á',
    senderAddressAreaThaiLaos: '‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á',
    receiverNameThaiLaos: '‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö',
    receiverPhoneThaiLaos: '‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö',
    receiverAddressThaiLaos: '‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö',
    receiverVillagesThaiLaos: '‡∏´‡∏°‡∏π‡πà‡∏ö‡πâ‡∏≤‡∏ô‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö',
    receiverDistricThaiLaos: '‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö',
    receiverProvincestThaiLaos: '‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö',
    receiverBranchThaiLaos: '‡∏™‡∏≤‡∏Ç‡∏≤‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö',
    weightThaiLaos: '‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å (‡∏Å‡∏Å.)',
    widthThaiLaos: '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á (‡∏ã‡∏°.)',
    lengthThaiLaos: '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß (‡∏ã‡∏°.)',
    heightThaiLaos: '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á (‡∏ã‡∏°.)',
    productTypeThaiLaos: '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤',
    
    // Laos form fields
    senderNameLaos: '‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á',
    senderPhoneLaos: '‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á',
    senderAddressLaos: '‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á',
    senderVillagesLaos: '‡∏´‡∏°‡∏π‡πà‡∏ö‡πâ‡∏≤‡∏ô‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á',
    senderDistricLaos: '‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á',
    senderProvincestLaos: '‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á',
    receiverNameLaos: '‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö',
    receiverPhoneLaos: '‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö',
    receiverAddressLaos: '‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö',
    receiverVillagesLaos: '‡∏´‡∏°‡∏π‡πà‡∏ö‡πâ‡∏≤‡∏ô‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö',
    receiverDistricLaos: '‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö',
    receiverProvincestLaos: '‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö',
    receiverBranchLaos: '‡∏™‡∏≤‡∏Ç‡∏≤‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö',
    weightLaos: '‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å (‡∏Å‡∏Å.)',
    widthLaos: '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á (‡∏ã‡∏°.)',
    lengthLaos: '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß (‡∏ã‡∏°.)',
    heightLaos: '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á (‡∏ã‡∏°.)',
    productTypeLaos: '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤',
    
    // Laos-Thai form fields
    senderNameLaosThai: '‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á',
    senderPhoneLaosThai: '‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á',
    senderAddressLaosThai: '‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á',
    senderVillagesLaosThai: '‡∏´‡∏°‡∏π‡πà‡∏ö‡πâ‡∏≤‡∏ô‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á',
    senderDistricLaosThai: '‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á',
    senderProvincestLaosThai: '‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á',
    receiverNameLaosThai: '‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö',
    receiverPhoneLaosThai: '‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö',
    receiverAddressLaosThai: '‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö',
    receiverAddressAreaLaosThai: '‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö',
    weightLaosThai: '‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å (‡∏Å‡∏Å.)',
    widthLaosThai: '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á (‡∏ã‡∏°.)',
    lengthLaosThai: '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß (‡∏ã‡∏°.)',
    heightLaosThai: '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á (‡∏ã‡∏°.)',
    productTypeLaosThai: '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤'
  };
  
  return translations[fieldName] || fieldName;
};

// üí± Currency formatter
export const formatCurrency = (amount: number, currency: 'THB' | 'LAK'): string => {
  if (currency === 'THB') {
    return new Intl.NumberFormat('th-TH', {
      style: 'currency',
      currency: 'THB',
      minimumFractionDigits: 0,
      maximumFractionDigits: 0
    }).format(amount);
  } else {
    return new Intl.NumberFormat('lo-LA', {
      style: 'currency',
      currency: 'LAK',
      minimumFractionDigits: 0,
      maximumFractionDigits: 0
    }).format(amount);
  }
};

// üìÖ Format date for display
export const formatDate = (date: Date): string => {
  return new Intl.DateTimeFormat('th-TH', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
  }).format(date);
};

// üîÑ Get shipping type display name
export const getShippingTypeDisplayName = (type: ShippingType): string => {
  const displayNames = {
    Thai: '‡∏Ç‡∏ô‡∏™‡πà‡∏á‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÑ‡∏ó‡∏¢',
    ThaiLaos: '‡∏Ç‡∏ô‡∏™‡πà‡∏á‡πÑ‡∏ó‡∏¢ - ‡∏•‡∏≤‡∏ß',
    Laos: '‡∏Ç‡∏ô‡∏™‡πà‡∏á‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏•‡∏≤‡∏ß',
    LaosThai: '‡∏Ç‡∏ô‡∏™‡πà‡∏á‡∏•‡∏≤‡∏ß - ‡πÑ‡∏ó‡∏¢'
  };
  
  return displayNames[type];
};

// üìä Calculate volume weight
export const calculateVolumeWeight = (
  width: number,
  length: number,
  height: number,
  divisor: number = 6000
): number => {
  return (width * length * height) / divisor;
};

// ‚öñÔ∏è Get chargeable weight (higher of actual weight or volume weight)
export const getChargeableWeight = (
  actualWeight: number,
  width: number,
  length: number,
  height: number
): number => {
  const volumeWeight = calculateVolumeWeight(width, length, height);
  return Math.max(actualWeight, volumeWeight);
};

// üé® Get status color
export const getStatusColor = (status: string): string => {
  const statusColors: Record<string, string> = {
    pending: 'bg-yellow-100 text-yellow-800',
    confirmed: 'bg-blue-100 text-blue-800',
    'in-transit': 'bg-purple-100 text-purple-800',
    delivered: 'bg-green-100 text-green-800',
    cancelled: 'bg-red-100 text-red-800'
  };
  
  return statusColors[status] || 'bg-gray-100 text-gray-800';
};

// üîç Filter and search helpers
export const filterBySearchTerm = <T>(
  items: T[],
  searchTerm: string,
  searchFields: (keyof T)[]
): T[] => {
  if (!searchTerm) return items;
  
  const term = searchTerm.toLowerCase();
  
  return items.filter(item =>
    searchFields.some(field => {
      const value = item[field];
      return typeof value === 'string' && value.toLowerCase().includes(term);
    })
  );
};

// üì± Mobile detection
export const isMobile = (): boolean => {
  return window.innerWidth < 768;
};

// üìã Copy to clipboard
export const copyToClipboard = async (text: string): Promise<boolean> => {
  try {
    await navigator.clipboard.writeText(text);
    return true;
  } catch (error) {
    console.error('Failed to copy to clipboard:', error);
    return false;
  }
};

// üîÑ Debounce function
export const debounce = <T extends (...args: unknown[]) => unknown>(
  func: T,
  wait: number
): (...args: Parameters<T>) => void => {
  let timeout: NodeJS.Timeout;
  
  return (...args: Parameters<T>) => {
    clearTimeout(timeout);
    timeout = setTimeout(() => func(...args), wait);
  };
};

// üìè Truncate text
export const truncateText = (text: string, maxLength: number): string => {
  if (text.length <= maxLength) return text;
  return text.substring(0, maxLength) + '...';
};
